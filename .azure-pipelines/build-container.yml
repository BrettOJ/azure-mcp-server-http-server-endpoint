# Azure DevOps Pipeline: Build and Push Azure MCP Server Container
# This pipeline builds the .NET application, creates a Docker container image,
# and pushes it to Azure Container Registry following CI/CD best practices.

trigger:
  branches:
    include:
      - main
      - develop
      - release/*
  paths:
    include:
      - 'servers/Azure.Mcp.Server/*'
      - 'core/*'
      - 'tools/*'
      - 'Dockerfile'
      - 'AzureMcp.sln'
      - 'Directory.Build.props'
      - 'Directory.Packages.props'
    exclude:
      - '*.md'
      - 'docs/*'
      - '.terraform/*'

pr:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - 'servers/Azure.Mcp.Server/*'
      - 'core/*'
      - 'tools/*'
      - 'Dockerfile'
      - 'AzureMcp.sln'

# Pipeline variables
variables:
  # Build Configuration
  buildConfiguration: 'Release'
  dotnetVersion: '10.x'
  
  # Container Registry Configuration
  containerRegistry: '$(AZURE_CONTAINER_REGISTRY)'  # Set in variable group
  imageRepository: 'azure-mcp-server'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  
  # Versioning
  majorVersion: '1'
  minorVersion: '0'
  patchVersion: $[counter(format('{0}.{1}', variables['majorVersion'], variables['minorVersion']), 1)]
  imageTag: '$(majorVersion).$(minorVersion).$(patchVersion)'
  latestTag: 'latest'
  
  # Security and Compliance
  vmImage: 'ubuntu-latest'
  
# Use variable groups for sensitive configuration
# Create these in Azure DevOps: Library > Variable Groups
# - container-registry-config: AZURE_CONTAINER_REGISTRY, ACR_SERVICE_CONNECTION
# - build-config: Additional build settings if needed

stages:
  # Stage 1: Build and Test
  - stage: BuildAndTest
    displayName: 'Build and Test Application'
    jobs:
      - job: Build
        displayName: 'Build .NET Application'
        pool:
          vmImage: $(vmImage)
        
        steps:
          # Checkout source code
          - checkout: self
            displayName: 'Checkout Source Code'
            fetchDepth: 1
            clean: true

          # Setup .NET SDK
          - task: UseDotNet@2
            displayName: 'Setup .NET SDK'
            inputs:
              packageType: 'sdk'
              version: '$(dotnetVersion)'
              includePreviewVersions: false

          # Restore NuGet packages
          - task: DotNetCoreCLI@2
            displayName: 'Restore NuGet Packages'
            inputs:
              command: 'restore'
              projects: 'AzureMcp.sln'
              feedsToUse: 'select'
              verbosityRestore: 'Normal'

          # Build solution
          - task: DotNetCoreCLI@2
            displayName: 'Build Solution'
            inputs:
              command: 'build'
              projects: 'AzureMcp.sln'
              arguments: '--configuration $(buildConfiguration) --no-restore'

          # Run unit tests
          - task: DotNetCoreCLI@2
            displayName: 'Run Unit Tests'
            inputs:
              command: 'test'
              projects: '**/*UnitTests/*.csproj'
              arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" --logger trx --results-directory $(Agent.TempDirectory)'
              publishTestResults: true

          # Publish test results
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'VSTest'
              testResultsFiles: '**/*.trx'
              searchFolder: '$(Agent.TempDirectory)'
              mergeTestResults: true
              failTaskOnFailedTests: true

          # Publish code coverage
          - task: PublishCodeCoverageResults@2
            displayName: 'Publish Code Coverage'
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
              reportDirectory: '$(Agent.TempDirectory)/coveragereport'

          # Publish the Azure MCP Server project
          - task: DotNetCoreCLI@2
            displayName: 'Publish Azure MCP Server'
            inputs:
              command: 'publish'
              projects: 'servers/Azure.Mcp.Server/src/Azure.Mcp.Server.csproj'
              arguments: '--configuration $(buildConfiguration) --no-build --output $(Build.ArtifactStagingDirectory)/publish'
              zipAfterPublish: false
              modifyOutputPath: false

          # Publish build artifacts
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Build Artifacts'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/publish'
              ArtifactName: 'azure-mcp-server'
              publishLocation: 'Container'

  # Stage 2: Security Scanning
  - stage: SecurityScan
    displayName: 'Security and Quality Scanning'
    dependsOn: BuildAndTest
    condition: succeeded()
    jobs:
      - job: SecurityScan
        displayName: 'Security Scan'
        pool:
          vmImage: $(vmImage)
        
        steps:
          # Download build artifacts
          - task: DownloadBuildArtifacts@1
            displayName: 'Download Build Artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'azure-mcp-server'
              downloadPath: '$(System.ArtifactsDirectory)'

          # Run security scan on published artifacts
          - task: UseDotNet@2
            displayName: 'Setup .NET SDK for Security Scan'
            inputs:
              packageType: 'sdk'
              version: '$(dotnetVersion)'

          # Security audit of NuGet packages
          - script: |
              dotnet list package --vulnerable --include-transitive
              dotnet list package --deprecated --include-transitive
            displayName: 'Audit NuGet Packages'
            workingDirectory: '$(Build.SourcesDirectory)'
            continueOnError: true

  # Stage 3: Build and Push Container Image
  - stage: ContainerBuild
    displayName: 'Build and Push Container Image'
    dependsOn: 
      - BuildAndTest
      - SecurityScan
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    jobs:
      - job: BuildContainer
        displayName: 'Build and Push Container'
        pool:
          vmImage: $(vmImage)
        
        steps:
          # Download build artifacts
          - task: DownloadBuildArtifacts@1
            displayName: 'Download Build Artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'azure-mcp-server'
              downloadPath: '$(System.ArtifactsDirectory)'

          # Azure Container Registry Login
          - task: AzureCLI@2
            displayName: 'Login to Azure Container Registry'
            inputs:
              azureSubscription: '$(ACR_SERVICE_CONNECTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az acr login --name $(containerRegistry)
                echo "Successfully logged in to $(containerRegistry)"

          # Build and push container image
          - task: Docker@2
            displayName: 'Build and Push Container Image'
            inputs:
              containerRegistry: '$(ACR_SERVICE_CONNECTION)'
              repository: '$(imageRepository)'
              command: 'buildAndPush'
              Dockerfile: '$(dockerfilePath)'
              buildContext: '$(Build.SourcesDirectory)'
              arguments: '--build-arg PUBLISH_DIR=$(System.ArtifactsDirectory)/azure-mcp-server'
              tags: |
                $(imageTag)
                $(latestTag)
                $(Build.BuildNumber)

          # Container image security scan
          - task: AzureCLI@2
            displayName: 'Scan Container Image for Vulnerabilities'
            inputs:
              azureSubscription: '$(ACR_SERVICE_CONNECTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Enable Defender for Containers if available
                az acr check-health --name $(containerRegistry) || true
                
                # Scan the pushed image
                echo "Container image scan completed for $(containerRegistry)/$(imageRepository):$(imageTag)"
            continueOnError: true

          # Generate container image manifest
          - task: AzureCLI@2
            displayName: 'Generate Image Manifest'
            inputs:
              azureSubscription: '$(ACR_SERVICE_CONNECTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Get image digest and size information
                DIGEST=$(az acr repository show --name $(containerRegistry) --image $(imageRepository):$(imageTag) --query "digest" -o tsv)
                SIZE=$(az acr repository show --name $(containerRegistry) --image $(imageRepository):$(imageTag) --query "imageSize" -o tsv)
                
                # Create manifest file
                cat > $(Build.ArtifactStagingDirectory)/image-manifest.json << EOF
                {
                  "registry": "$(containerRegistry)",
                  "repository": "$(imageRepository)",
                  "tag": "$(imageTag)",
                  "digest": "$DIGEST",
                  "size": "$SIZE",
                  "buildId": "$(Build.BuildId)",
                  "buildNumber": "$(Build.BuildNumber)",
                  "sourceVersion": "$(Build.SourceVersion)",
                  "sourceBranch": "$(Build.SourceBranchName)",
                  "buildDate": "$(System.DateTime)"
                }
                EOF
                
                echo "Image manifest created for $(containerRegistry)/$(imageRepository):$(imageTag)"
                cat $(Build.ArtifactStagingDirectory)/image-manifest.json

          # Publish container image artifacts
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Container Artifacts'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'container-image'
              publishLocation: 'Container'

  # Stage 4: Create Release Notes
  - stage: ReleaseNotes
    displayName: 'Generate Release Information'
    dependsOn: ContainerBuild
    condition: succeeded()
    jobs:
      - job: GenerateReleaseNotes
        displayName: 'Generate Release Notes'
        pool:
          vmImage: $(vmImage)
        
        steps:
          # Generate release notes
          - script: |
              echo "# Azure MCP Server Release $(imageTag)" > $(Build.ArtifactStagingDirectory)/RELEASE_NOTES.md
              echo "" >> $(Build.ArtifactStagingDirectory)/RELEASE_NOTES.md
              echo "## Container Image" >> $(Build.ArtifactStagingDirectory)/RELEASE_NOTES.md
              echo "- **Registry**: $(containerRegistry)" >> $(Build.ArtifactStagingDirectory)/RELEASE_NOTES.md
              echo "- **Repository**: $(imageRepository)" >> $(Build.ArtifactStagingDirectory)/RELEASE_NOTES.md
              echo "- **Tag**: $(imageTag)" >> $(Build.ArtifactStagingDirectory)/RELEASE_NOTES.md
              echo "- **Build**: $(Build.BuildNumber)" >> $(Build.ArtifactStagingDirectory)/RELEASE_NOTES.md
              echo "- **Source**: $(Build.SourceVersion)" >> $(Build.ArtifactStagingDirectory)/RELEASE_NOTES.md
              echo "" >> $(Build.ArtifactStagingDirectory)/RELEASE_NOTES.md
              echo "## Deployment" >> $(Build.ArtifactStagingDirectory)/RELEASE_NOTES.md
              echo "\`\`\`bash" >> $(Build.ArtifactStagingDirectory)/RELEASE_NOTES.md
              echo "docker pull $(containerRegistry)/$(imageRepository):$(imageTag)" >> $(Build.ArtifactStagingDirectory)/RELEASE_NOTES.md
              echo "docker run -p 8080:8080 $(containerRegistry)/$(imageRepository):$(imageTag)" >> $(Build.ArtifactStagingDirectory)/RELEASE_NOTES.md
              echo "\`\`\`" >> $(Build.ArtifactStagingDirectory)/RELEASE_NOTES.md
            displayName: 'Generate Release Notes'

          # Publish release artifacts
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Release Notes'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'release-notes'
              publishLocation: 'Container'

# Pipeline completion summary
# This pipeline:
# 1. ✅ Builds and tests the .NET application
# 2. ✅ Runs security scans on dependencies
# 3. ✅ Builds Docker container image
# 4. ✅ Pushes to Azure Container Registry with proper tagging
# 5. ✅ Generates release artifacts and documentation
# 
# Required Azure DevOps setup:
# - Service connection to Azure Container Registry
# - Variable group: container-registry-config
# - Appropriate permissions for the pipeline service principal